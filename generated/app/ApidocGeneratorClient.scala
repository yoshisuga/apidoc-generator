/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.9.30
 * apidoc:0.9.32 http://www.apidoc.me/bryzek/apidoc-generator/0.9.30/play_2_4_client
 */
package com.bryzek.apidoc.generator.v0.models {

  case class Error(
    code: String,
    message: String
  )

  /**
   * Represents a source file
   */
  case class File(
    name: String,
    dir: _root_.scala.Option[String] = None,
    contents: String
  )

  /**
   * The generator metadata.
   */
  case class Generator(
    key: String,
    name: String,
    language: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None
  )

  case class Healthcheck(
    status: String
  )

  /**
   * The result of invoking a generator.
   */
  case class Invocation(
    source: String,
    files: Seq[com.bryzek.apidoc.generator.v0.models.File]
  )

  case class InvocationForm(
    service: com.bryzek.apidoc.spec.v0.models.Service,
    userAgent: _root_.scala.Option[String] = None
  )

}

package com.bryzek.apidoc.generator.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsApidocgeneratorError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    implicit def jsonWritesApidocgeneratorError: play.api.libs.json.Writes[Error] = {
      (
        (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
    }

    implicit def jsonReadsApidocgeneratorFile: play.api.libs.json.Reads[File] = {
      (
        (__ \ "name").read[String] and
        (__ \ "dir").readNullable[String] and
        (__ \ "contents").read[String]
      )(File.apply _)
    }

    implicit def jsonWritesApidocgeneratorFile: play.api.libs.json.Writes[File] = {
      (
        (__ \ "name").write[String] and
        (__ \ "dir").writeNullable[String] and
        (__ \ "contents").write[String]
      )(unlift(File.unapply _))
    }

    implicit def jsonReadsApidocgeneratorGenerator: play.api.libs.json.Reads[Generator] = {
      (
        (__ \ "key").read[String] and
        (__ \ "name").read[String] and
        (__ \ "language").readNullable[String] and
        (__ \ "description").readNullable[String]
      )(Generator.apply _)
    }

    implicit def jsonWritesApidocgeneratorGenerator: play.api.libs.json.Writes[Generator] = {
      (
        (__ \ "key").write[String] and
        (__ \ "name").write[String] and
        (__ \ "language").writeNullable[String] and
        (__ \ "description").writeNullable[String]
      )(unlift(Generator.unapply _))
    }

    implicit def jsonReadsApidocgeneratorHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    implicit def jsonWritesApidocgeneratorHealthcheck: play.api.libs.json.Writes[Healthcheck] = new play.api.libs.json.Writes[Healthcheck] {
      def writes(x: Healthcheck) = play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.Json.toJson(x.status)
      )
    }

    implicit def jsonReadsApidocgeneratorInvocation: play.api.libs.json.Reads[Invocation] = {
      (
        (__ \ "source").read[String] and
        (__ \ "files").read[Seq[com.bryzek.apidoc.generator.v0.models.File]]
      )(Invocation.apply _)
    }

    implicit def jsonWritesApidocgeneratorInvocation: play.api.libs.json.Writes[Invocation] = {
      (
        (__ \ "source").write[String] and
        (__ \ "files").write[Seq[com.bryzek.apidoc.generator.v0.models.File]]
      )(unlift(Invocation.unapply _))
    }

    implicit def jsonReadsApidocgeneratorInvocationForm: play.api.libs.json.Reads[InvocationForm] = {
      (
        (__ \ "service").read[com.bryzek.apidoc.spec.v0.models.Service] and
        (__ \ "user_agent").readNullable[String]
      )(InvocationForm.apply _)
    }

    implicit def jsonWritesApidocgeneratorInvocationForm: play.api.libs.json.Writes[InvocationForm] = {
      (
        (__ \ "service").write[com.bryzek.apidoc.spec.v0.models.Service] and
        (__ \ "user_agent").writeNullable[String]
      )(unlift(InvocationForm.unapply _))
    }
  }
}

package com.bryzek.apidoc.generator.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.bryzek.apidoc.generator.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package com.bryzek.apidoc.generator.v0 {

  object Constants {

    val UserAgent = "apidoc:0.9.32 http://www.apidoc.me/bryzek/apidoc-generator/0.9.30/play_2_4_client"
    val Version = "0.9.30"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.bryzek.apidoc.generator.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    private[this] val logger = play.api.Logger("com.bryzek.apidoc.generator.v0.Client")

    logger.info(s"Initializing com.bryzek.apidoc.generator.v0.Client for url $apiUrl")

    def generators: Generators = Generators

    def healthchecks: Healthchecks = Healthchecks

    def invocations: Invocations = Invocations

    object Generators extends Generators {
      override def get(
        key: _root_.scala.Option[String] = None,
        limit: Int = 100,
        offset: Int = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.generator.v0.models.Generator]] = {
        val queryParameters = Seq(
          key.map("key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/generators", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.generator.v0.Client.parseJson("Seq[com.bryzek.apidoc.generator.v0.models.Generator]", r, _.validate[Seq[com.bryzek.apidoc.generator.v0.models.Generator]])
          case r => throw new com.bryzek.apidoc.generator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByKey(
        key: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Generator] = {
        _executeRequest("GET", s"/generators/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.generator.v0.Client.parseJson("com.bryzek.apidoc.generator.v0.models.Generator", r, _.validate[com.bryzek.apidoc.generator.v0.models.Generator])
          case r if r.status == 404 => throw new com.bryzek.apidoc.generator.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.generator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.generator.v0.Client.parseJson("com.bryzek.apidoc.generator.v0.models.Healthcheck", r, _.validate[com.bryzek.apidoc.generator.v0.models.Healthcheck])
          case r => throw new com.bryzek.apidoc.generator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Invocations extends Invocations {
      override def postByKey(
        key: String,
        invocationForm: com.bryzek.apidoc.generator.v0.models.InvocationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Invocation] = {
        val payload = play.api.libs.json.Json.toJson(invocationForm)

        _executeRequest("POST", s"/invocations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.generator.v0.Client.parseJson("com.bryzek.apidoc.generator.v0.models.Invocation", r, _.validate[com.bryzek.apidoc.generator.v0.models.Invocation])
          case r if r.status == 409 => throw new com.bryzek.apidoc.generator.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.generator.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) { a =>
        a match {
          case Authorization.Basic(username, password) => {
            holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
          }
          case _ => sys.error("Invalid authorization scheme[" + a.getClass + "]")
        }
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield name -> value
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.bryzek.apidoc.generator.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Generators {
    /**
     * Get all available generators
     */
    def get(
      key: _root_.scala.Option[String] = None,
      limit: Int = 100,
      offset: Int = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.generator.v0.models.Generator]]

    /**
     * Get generator with this key
     */
    def getByKey(
      key: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Generator]
  }

  trait Healthchecks {
    def getInternalAndHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Healthcheck]
  }

  trait Invocations {
    /**
     * Invoke a generator
     */
    def postByKey(
      key: String,
      invocationForm: com.bryzek.apidoc.generator.v0.models.InvocationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Invocation]
  }

  package errors {

    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.com.bryzek.apidoc.generator.v0.Client.parseJson("Seq[com.bryzek.apidoc.generator.v0.models.Error]", response, _.validate[Seq[com.bryzek.apidoc.generator.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}